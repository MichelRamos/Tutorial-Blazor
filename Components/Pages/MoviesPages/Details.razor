@page "/movies/details"
@using Microsoft.EntityFrameworkCore
@using BlazorWebAppMovies.Models
@inject IDbContextFactory<BlazorWebAppMovies.Data.BlazorWebAppMoviesContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Movies</h2>
    <hr />
    @if (movies is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@movies.Title</dd>
            <dt class="col-sm-2">Release Date</dt>
            <dd class="col-sm-10">@movies.ReleaseDate</dd>
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@movies.Genre</dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10">@movies.Price</dd>
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@movies.Rating</dd>
        </dl>
        <div>
            <a href="@($"/movies/edit?id={movies.Id}")">Edit</a> |
            <a href="@($"/movies")">Back to List</a>
        </div>
    }
</div>

@code {
    private Movies? movies;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        movies = await context.Movies.FirstOrDefaultAsync(m => m.Id == Id);

        if (movies is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
